import React, { useState } from 'react';
import { PlanNode, NodeStatus } from '../../types';
import { formatDate, getStatusLabel } from '../../utils/planUtils';
import { Trash2, Copy } from 'lucide-react';

interface NodeDetailsTabProps {
  node: PlanNode;
  onStatusChange: (newStatus: NodeStatus) => void; // Callback to update status
  onDelete?: () => void; // Optional callback to delete the node
}

const NodeDetailsTab: React.FC<NodeDetailsTabProps> = ({ node, onStatusChange, onDelete }) => {
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({
    description: true,
    context: true,
    agent_instructions: false,
    acceptance_criteria: true,
    metadata: false
  });

  const toggleSection = (section: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  // Handle delete confirmation
  const handleDeleteClick = () => {
    setShowDeleteConfirm(true);
  };

  const confirmDelete = () => {
    if (onDelete) {
      onDelete();
    }
    setShowDeleteConfirm(false);
  };

  const cancelDelete = () => {
    setShowDeleteConfirm(false);
  };
  
  // Copy to clipboard function
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };
  
  return (
    <div className="space-y-4">
      {/* Node ID */}
      <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-3">
        <h3 className="text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider mb-1">Node ID</h3>
        <div className="flex items-center">
          <code className="text-xs bg-white dark:bg-gray-800 px-2 py-1 rounded font-mono overflow-x-auto flex-grow border border-gray-200 dark:border-gray-700">
            {node.id}
          </code>
          <button 
            onClick={() => copyToClipboard(node.id)}
            className="ml-2 text-blue-500 hover:text-blue-700 p-1 flex-shrink-0"
            title="Copy node ID"
          >
            <Copy className="h-3 w-3" />
          </button>
        </div>
      </div>

      {/* Description */}
      <div className="border border-gray-200 dark:border-gray-700 rounded-lg">
        <button
          onClick={() => toggleSection('description')}
          className="w-full px-3 py-2 flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-t-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
        >
          <h3 className="text-sm font-semibold text-gray-700 dark:text-gray-300">Description</h3>
          <svg className={`w-4 h-4 text-gray-500 transition-transform ${expandedSections.description ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        {expandedSections.description && (
          <div className="p-3 bg-white dark:bg-gray-800">
            <p className="text-sm text-gray-900 dark:text-gray-100 whitespace-pre-wrap break-words">
              {node.description || <span className="italic text-gray-400">No description provided.</span>}
            </p>
          </div>
        )}
      </div>

      {/* Context */}
      {node.context && (
        <div className="border border-gray-200 dark:border-gray-700 rounded-lg">
          <button
            onClick={() => toggleSection('context')}
            className="w-full px-3 py-2 flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-t-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          >
            <h3 className="text-sm font-semibold text-gray-700 dark:text-gray-300">Context</h3>
            <svg className={`w-4 h-4 text-gray-500 transition-transform ${expandedSections.context ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          {expandedSections.context && (
            <div className="p-3 bg-white dark:bg-gray-800">
              <p className="text-sm text-gray-900 dark:text-gray-100 whitespace-pre-wrap break-words">
                {node.context}
              </p>
            </div>
          )}
        </div>
      )}

      {/* Agent Instructions */}
      {node.agent_instructions && (
        <div className="border border-gray-200 dark:border-gray-700 rounded-lg">
          <button
            onClick={() => toggleSection('agent_instructions')}
            className="w-full px-3 py-2 flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-t-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          >
            <h3 className="text-sm font-semibold text-gray-700 dark:text-gray-300">Agent Instructions</h3>
            <svg className={`w-4 h-4 text-gray-500 transition-transform ${expandedSections.agent_instructions ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          {expandedSections.agent_instructions && (
            <div className="p-3 bg-white dark:bg-gray-800">
              <p className="text-sm text-gray-900 dark:text-gray-100 whitespace-pre-wrap break-words">
                {node.agent_instructions}
              </p>
            </div>
          )}
        </div>
      )}

      {/* Acceptance Criteria */}
      {node.acceptance_criteria && (
        <div className="border border-gray-200 dark:border-gray-700 rounded-lg">
          <button
            onClick={() => toggleSection('acceptance_criteria')}
            className="w-full px-3 py-2 flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-t-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          >
            <h3 className="text-sm font-semibold text-gray-700 dark:text-gray-300">Acceptance Criteria</h3>
            <svg className={`w-4 h-4 text-gray-500 transition-transform ${expandedSections.acceptance_criteria ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          {expandedSections.acceptance_criteria && (
            <div className="p-3 bg-white dark:bg-gray-800">
              <p className="text-sm text-gray-900 dark:text-gray-100 whitespace-pre-wrap break-words">
                {node.acceptance_criteria}
              </p>
            </div>
          )}
        </div>
      )}

      {/* Status Update */}
      <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-3">
        <h3 className="text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider mb-2">Update Status</h3>
        <div className="grid grid-cols-2 gap-2">
          {(['not_started', 'in_progress', 'completed', 'blocked'] as NodeStatus[]).map((status) => (
            <button
              key={status}
              onClick={() => onStatusChange(status)}
              disabled={node.status === status}
              className={`px-3 py-1.5 text-xs rounded-md border transition-colors disabled:cursor-not-allowed disabled:opacity-70 ${
                node.status === status
                  ? 'bg-blue-600 text-white border-blue-600' // Active state
                  : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-300 dark:hover:bg-gray-700'
              }`}
            >
              {getStatusLabel(status)}
            </button>
          ))}
        </div>
      </div>

      {/* Metadata (Optional display) */}
       {node.metadata && Object.keys(node.metadata).length > 0 && (
         <div className="border border-gray-200 dark:border-gray-700 rounded-lg">
           <button
             onClick={() => toggleSection('metadata')}
             className="w-full px-3 py-2 flex items-center justify-between bg-gray-50 dark:bg-gray-900 rounded-t-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
           >
             <h3 className="text-sm font-semibold text-gray-700 dark:text-gray-300">Metadata</h3>
             <svg className={`w-4 h-4 text-gray-500 transition-transform ${expandedSections.metadata ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
             </svg>
           </button>
           {expandedSections.metadata && (
             <div className="p-3 bg-white dark:bg-gray-800">
               <pre className="text-xs bg-gray-50 dark:bg-gray-900 p-2 rounded overflow-x-auto border border-gray-200 dark:border-gray-700">
                 {JSON.stringify(node.metadata, null, 2)}
               </pre>
             </div>
           )}
         </div>
       )}

      {/* Delete Node Button (if callback provided and not root node) */}
      {onDelete && node.node_type === 'root' && (
        <div className="pt-2 text-center text-xs text-gray-500 dark:text-gray-400">
          Cannot delete root node
        </div>
      )}

      {onDelete && node.node_type !== 'root' && (
        <div className="pt-4 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={handleDeleteClick}
            className="flex items-center justify-center w-full py-2 px-4 text-sm font-medium text-red-600 bg-white border border-red-300 rounded-md hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:bg-gray-800 dark:text-red-400 dark:border-red-700 dark:hover:bg-gray-700"
          >
            <Trash2 className="w-4 h-4 mr-2" />
            Delete Node
          </button>
        </div>
      )}

      {/* Delete Confirmation Dialog */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 max-w-sm mx-auto">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">Confirm Delete</h3>
            <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">
              Are you sure you want to delete "{node.title}"? This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-3">
              <button
                onClick={cancelDelete}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600"
              >
                Cancel
              </button>
              <button
                onClick={confirmDelete}
                className="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}

    </div>
  );
};

export default NodeDetailsTab;