import React, { useState, useEffect } from 'react';
import { 
  User,
  Users,
  Calendar,
  Clock,
  Circle,
  AlertCircle,
  CheckCircle,
  XCircle,
  PlayCircle,
  PauseCircle,
  MoreHorizontal,
  MessageSquare,
  Paperclip,
  Eye,
  EyeOff,
  UserPlus,
  Bell,
  BellOff,
  ChevronDown,
  ChevronRight,
  Activity,
  Target,
  Flag,
  Link2,
  Edit3,
  Trash2,
  Share2,
  Star,
  StarOff,
  FileText,
  Send
} from 'lucide-react';
import { PlanNode, NodeStatus, User as UserType } from '../../types';
import { formatDate, getStatusLabel } from '../../utils/planUtils';
import NodeCommentsTab from './NodeCommentsTab';
import NodeArtifactsTab from './NodeArtifactsTab';
import NodeLogsTab from './NodeLogsTab';
import { useNodeComments } from '../../hooks/useNodeComments';
import { useNodeArtifacts } from '../../hooks/useNodeArtifacts';

interface ImprovedNodeDetailsProps {
  node: PlanNode;
  planId: string;
  assignedUsers?: AssignedUser[];
  activeUsers?: UserType[];
  currentUser?: UserType;
  onStatusChange: (newStatus: NodeStatus) => void;
  onAssignUser?: (userId: string, role: AssignmentRole) => void;
  onRemoveUser?: (userId: string) => void;
  onDelete?: () => void;
  onWatch?: () => void;
  onStar?: () => void;
  onClose?: () => void;
  isWatching?: boolean;
  isStarred?: boolean;
}

interface AssignedUser {
  id: string;
  name: string;
  email: string;
  avatar_url?: string;
  assignmentRole: AssignmentRole;
  assignedAt: string;
}

type AssignmentRole = 'assignee' | 'contributor' | 'reviewer' | 'watcher';

// Quick Stats Component
const QuickStats: React.FC<{ node: PlanNode; commentCount: number; artifactCount: number }> = ({ 
  node, 
  commentCount, 
  artifactCount 
}) => {
  const stats = {
    subtasks: { completed: 0, total: 0 },
    progress: 0,
    daysRemaining: 0,
    health: 'on-track' as 'on-track' | 'at-risk' | 'behind'
  };

  // Calculate days remaining
  if (node.due_date) {
    const dueDate = new Date(node.due_date);
    const today = new Date();
    const diffTime = dueDate.getTime() - today.getTime();
    stats.daysRemaining = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (stats.daysRemaining < 0) {
      stats.health = 'behind';
    } else if (stats.daysRemaining <= 3) {
      stats.health = 'at-risk';
    }
  }

  // Calculate progress based on status
  if (node.status === 'completed') {
    stats.progress = 100;
  } else if (node.status === 'in_progress') {
    stats.progress = 50;
  } else if (node.status === 'not_started') {
    stats.progress = 0;
  }

  return (
    <div className="bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-750 rounded-xl p-4 mb-4">
      <div className="grid grid-cols-3 gap-4">
        <div className="text-center">
          <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
            {stats.progress}%
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">Progress</div>
        </div>
        
        <div className="text-center">
          <div className={`text-2xl font-bold ${
            stats.health === 'on-track' ? 'text-green-600 dark:text-green-400' :
            stats.health === 'at-risk' ? 'text-yellow-600 dark:text-yellow-400' :
            'text-red-600 dark:text-red-400'
          }`}>
            {Math.abs(stats.daysRemaining)}d
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
            {stats.daysRemaining >= 0 ? 'Remaining' : 'Overdue'}
          </div>
        </div>
        
        <div className="text-center">
          <div className="flex justify-center gap-3">
            <div>
              <div className="text-xl font-bold text-purple-600 dark:text-purple-400">
                {commentCount}
              </div>
              <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                <MessageSquare className="w-3 h-3 inline" />
              </div>
            </div>
            <div>
              <div className="text-xl font-bold text-indigo-600 dark:text-indigo-400">
                {artifactCount}
              </div>
              <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                <Paperclip className="w-3 h-3 inline" />
              </div>
            </div>
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">Activity</div>
        </div>
      </div>
    </div>
  );
};

// Status Selector Component
const StatusSelector: React.FC<{
  currentStatus: NodeStatus;
  onChange: (status: NodeStatus) => void;
}> = ({ currentStatus, onChange }) => {
  const [isOpen, setIsOpen] = useState(false);
  
  const statusConfig = {
    not_started: { icon: Circle, color: 'text-gray-500', bg: 'bg-gray-100 dark:bg-gray-700' },
    in_progress: { icon: PlayCircle, color: 'text-blue-500', bg: 'bg-blue-100 dark:bg-blue-900' },
    completed: { icon: CheckCircle, color: 'text-green-500', bg: 'bg-green-100 dark:bg-green-900' },
    blocked: { icon: XCircle, color: 'text-red-500', bg: 'bg-red-100 dark:bg-red-900' }
  };

  const CurrentIcon = statusConfig[currentStatus].icon;

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={`flex items-center gap-2 px-3 py-1.5 rounded-lg text-sm font-medium transition-colors
          ${statusConfig[currentStatus].bg} ${statusConfig[currentStatus].color}`}
      >
        <CurrentIcon className="w-4 h-4" />
        <span className="capitalize">{currentStatus.replace('_', ' ')}</span>
        <ChevronDown className={`w-3 h-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>
      
      {isOpen && (
        <div className="absolute top-full left-0 mt-1 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50">
          <div className="py-1">
            {(['not_started', 'in_progress', 'completed', 'blocked'] as NodeStatus[]).map(status => {
              const StatusIcon = statusConfig[status].icon;
              return (
                <button
                  key={status}
                  onClick={() => {
                    onChange(status);
                    setIsOpen(false);
                  }}
                  className={`w-full flex items-center gap-2 px-3 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors
                    ${currentStatus === status ? 'bg-gray-50 dark:bg-gray-700' : ''}`}
                >
                  <StatusIcon className={`w-4 h-4 ${statusConfig[status].color}`} />
                  <span className="capitalize">{status.replace('_', ' ')}</span>
                </button>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
};

// User Avatar Component
const UserAvatar: React.FC<{ 
  user: UserType | AssignedUser; 
  size?: 'sm' | 'md' | 'lg';
  showName?: boolean;
  showPresence?: boolean;
  role?: string;
}> = ({ user, size = 'md', showName = false, showPresence = false, role }) => {
  const sizeClasses = {
    sm: 'w-6 h-6 text-xs',
    md: 'w-8 h-8 text-sm',
    lg: 'w-10 h-10 text-base'
  };

  return (
    <div className="flex items-center gap-2">
      <div className="relative">
        {user.avatar_url ? (
          <img 
            src={user.avatar_url} 
            alt={user.name}
            className={`${sizeClasses[size]} rounded-full border-2 border-white dark:border-gray-800`}
          />
        ) : (
          <div className={`${sizeClasses[size]} rounded-full bg-gradient-to-br from-blue-500 to-purple-500 
            flex items-center justify-center text-white font-medium`}>
            {user.name.charAt(0).toUpperCase()}
          </div>
        )}
        {showPresence && (
          <div className="absolute -bottom-0.5 -right-0.5 w-2.5 h-2.5 bg-green-500 rounded-full border-2 border-white dark:border-gray-800" />
        )}
      </div>
      {showName && (
        <div className="flex flex-col">
          <span className="text-sm font-medium text-gray-900 dark:text-white">{user.name}</span>
          {role && <span className="text-xs text-gray-500 dark:text-gray-400">{role}</span>}
        </div>
      )}
    </div>
  );
};

// Team Section Component
const TeamSection: React.FC<{
  assignedUsers?: AssignedUser[];
  activeUsers?: UserType[];
  onAssignUser?: (userId: string, role: AssignmentRole) => void;
  onRemoveUser?: (userId: string) => void;
}> = ({ assignedUsers = [], activeUsers = [], onAssignUser, onRemoveUser }) => {
  const assignee = assignedUsers.find(u => u.assignmentRole === 'assignee');
  const contributors = assignedUsers.filter(u => u.assignmentRole === 'contributor');
  
  return (
    <div className="space-y-3">
      <div className="flex items-center justify-between">
        <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">Team</h4>
        {onAssignUser && (
          <button className="text-xs text-blue-600 hover:text-blue-700 dark:text-blue-400">
            <UserPlus className="w-3.5 h-3.5" />
          </button>
        )}
      </div>
      
      {/* Assignee */}
      <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
        <div className="flex items-center gap-2">
          <User className="w-4 h-4 text-gray-400" />
          <span className="text-xs text-gray-500 dark:text-gray-400">Assignee</span>
        </div>
        {assignee ? (
          <UserAvatar user={assignee} size="sm" showName={true} />
        ) : (
          <button className="text-xs text-blue-600 hover:text-blue-700 dark:text-blue-400">
            Assign someone
          </button>
        )}
      </div>
      
      {/* Contributors */}
      {contributors.length > 0 && (
        <div className="flex -space-x-2">
          {contributors.slice(0, 5).map(user => (
            <UserAvatar key={user.id} user={user} size="sm" />
          ))}
          {contributors.length > 5 && (
            <div className="w-6 h-6 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-xs">
              +{contributors.length - 5}
            </div>
          )}
        </div>
      )}
      
      {/* Live Presence */}
      {activeUsers.length > 0 && (
        <div className="flex items-center gap-2 p-2 bg-green-50 dark:bg-green-900/20 rounded-lg">
          <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
          <span className="text-xs text-green-700 dark:text-green-400">
            {activeUsers.length} {activeUsers.length === 1 ? 'person' : 'people'} viewing now
          </span>
        </div>
      )}
    </div>
  );
};

// Quick Comment Input
const QuickCommentInput: React.FC<{ 
  planId: string; 
  nodeId: string; 
  onSuccess?: () => void;
}> = ({ planId, nodeId, onSuccess }) => {
  const [comment, setComment] = useState('');
  const { addComment, isAddingComment } = useNodeComments(planId, nodeId);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!comment.trim()) return;
    
    addComment({ content: comment }, {
      onSuccess: () => {
        setComment('');
        onSuccess?.();
      }
    });
  };

  return (
    <form onSubmit={handleSubmit} className="flex gap-2">
      <input
        type="text"
        value={comment}
        onChange={(e) => setComment(e.target.value)}
        placeholder="Add a quick comment..."
        className="flex-1 px-3 py-1.5 text-sm border border-gray-300 dark:border-gray-600 rounded-lg 
          focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800"
        disabled={isAddingComment}
      />
      <button
        type="submit"
        disabled={isAddingComment || !comment.trim()}
        className="p-1.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <Send className="w-4 h-4" />
      </button>
    </form>
  );
};

// Quick Actions Bar
const QuickActions: React.FC<{
  node: PlanNode;
  onWatch?: () => void;
  onStar?: () => void;
  onShare?: () => void;
  onDelete?: () => void;
  isWatching?: boolean;
  isStarred?: boolean;
}> = ({ node, onWatch, onStar, onShare, onDelete, isWatching, isStarred }) => {
  return (
    <div className="flex items-center gap-1 p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
      {onWatch && (
        <button
          onClick={onWatch}
          className={`p-2 rounded-lg transition-colors ${
            isWatching 
              ? 'bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-400' 
              : 'hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-600 dark:text-gray-400'
          }`}
          title={isWatching ? 'Stop watching' : 'Watch for updates'}
        >
          {isWatching ? <BellOff className="w-4 h-4" /> : <Bell className="w-4 h-4" />}
        </button>
      )}
      
      {onStar && (
        <button
          onClick={onStar}
          className={`p-2 rounded-lg transition-colors ${
            isStarred 
              ? 'bg-yellow-100 text-yellow-600 dark:bg-yellow-900 dark:text-yellow-400' 
              : 'hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-600 dark:text-gray-400'
          }`}
          title={isStarred ? 'Remove star' : 'Star this node'}
        >
          {isStarred ? <Star className="w-4 h-4 fill-current" /> : <StarOff className="w-4 h-4" />}
        </button>
      )}
      
      {onShare && (
        <button
          onClick={onShare}
          className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors text-gray-600 dark:text-gray-400"
          title="Share"
        >
          <Share2 className="w-4 h-4" />
        </button>
      )}
      
      <div className="flex-1" />
      
      {onDelete && node.node_type !== 'root' && (
        <button
          onClick={onDelete}
          className="p-2 hover:bg-red-50 dark:hover:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg transition-colors"
          title="Delete node"
        >
          <Trash2 className="w-4 h-4" />
        </button>
      )}
    </div>
  );
};

// Main Component
const ImprovedNodeDetails: React.FC<ImprovedNodeDetailsProps> = ({
  node,
  planId,
  assignedUsers = [],
  activeUsers = [],
  currentUser,
  onStatusChange,
  onAssignUser,
  onRemoveUser,
  onDelete,
  onWatch,
  onStar,
  onClose,
  isWatching = false,
  isStarred = false
}) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'details' | 'comments' | 'artifacts' | 'logs'>('overview');
  const [isDescriptionExpanded, setIsDescriptionExpanded] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  
  // Fetch comment and artifact counts
  const { comments } = useNodeComments(planId, node.id);
  const { artifacts } = useNodeArtifacts(planId, node.id);
  
  const commentCount = comments?.length || node.comment_count || 0;
  const artifactCount = artifacts?.length || node.artifact_count || 0;

  // Description truncation
  const maxDescriptionLength = 150;
  const shouldTruncate = node.description && node.description.length > maxDescriptionLength;
  const displayDescription = shouldTruncate && !isDescriptionExpanded && node.description
    ? node.description.substring(0, maxDescriptionLength) + '...'
    : node.description;

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="px-4 py-3 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-start justify-between mb-2">
          <div className="flex-1">
            <div className="flex items-start justify-between">
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white line-clamp-2 flex-1">
                {node.title}
              </h2>
              {onClose && (
                <button
                  onClick={onClose}
                  className="ml-2 p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
                >
                  <XCircle className="w-5 h-5 text-gray-400" />
                </button>
              )}
            </div>
            <div className="flex items-center gap-3 mt-1">
              {node.due_date && (
                <div className="flex items-center gap-1 text-xs text-gray-500 dark:text-gray-400">
                  <Calendar className="w-3 h-3" />
                  <span>{formatDate(node.due_date)}</span>
                </div>
              )}
              <div className="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
                <MessageSquare className="w-3 h-3" />
                <span>{commentCount}</span>
                <Paperclip className="w-3 h-3 ml-2" />
                <span>{artifactCount}</span>
              </div>
            </div>
          </div>
          <StatusSelector 
            currentStatus={node.status}
            onChange={onStatusChange}
          />
        </div>
      </div>

      {/* Quick Stats */}
      <div className="px-4 pt-4">
        <QuickStats node={node} commentCount={commentCount} artifactCount={artifactCount} />
      </div>

      {/* Tabs */}
      <div className="px-4">
        <div className="flex border-b border-gray-200 dark:border-gray-700 -mb-px">
          {(['overview', 'details', 'comments', 'artifacts', 'logs'] as const).map(tab => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-3 py-2 text-sm font-medium capitalize transition-colors border-b-2 ${
                activeTab === tab
                  ? 'border-blue-500 text-blue-600 dark:text-blue-400'
                  : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400'
              }`}
            >
              {tab}
              {tab === 'comments' && commentCount > 0 && (
                <span className="ml-1 text-xs bg-gray-100 dark:bg-gray-700 px-1.5 py-0.5 rounded-full">
                  {commentCount}
                </span>
              )}
              {tab === 'artifacts' && artifactCount > 0 && (
                <span className="ml-1 text-xs bg-gray-100 dark:bg-gray-700 px-1.5 py-0.5 rounded-full">
                  {artifactCount}
                </span>
              )}
            </button>
          ))}
        </div>
      </div>

      {/* Tab Content */}
      <div className="flex-1 overflow-y-auto px-4 py-4">
        {activeTab === 'overview' && (
          <div className="space-y-4">
            {/* Description */}
            {node.description && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Description
                </h4>
                <p className="text-sm text-gray-600 dark:text-gray-400 whitespace-pre-wrap">
                  {displayDescription}
                </p>
                {shouldTruncate && (
                  <button
                    onClick={() => setIsDescriptionExpanded(!isDescriptionExpanded)}
                    className="text-xs text-blue-600 hover:text-blue-700 dark:text-blue-400 mt-1"
                  >
                    {isDescriptionExpanded ? 'Show less' : 'Read more'}
                  </button>
                )}
              </div>
            )}

            {/* Team */}
            <TeamSection
              assignedUsers={assignedUsers}
              activeUsers={activeUsers}
              onAssignUser={onAssignUser}
              onRemoveUser={onRemoveUser}
            />

            {/* Quick Comment */}
            <div>
              <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Quick Comment
              </h4>
              <QuickCommentInput 
                planId={planId} 
                nodeId={node.id} 
                onSuccess={() => setActiveTab('comments')}
              />
            </div>

            {/* Recent Activity */}
            <div>
              <div className="flex items-center justify-between mb-2">
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Recent Activity
                </h4>
                <button 
                  onClick={() => setActiveTab('logs')}
                  className="text-xs text-blue-600 hover:text-blue-700 dark:text-blue-400"
                >
                  View all →
                </button>
              </div>
              <div className="space-y-2">
                <div className="flex items-start gap-2 text-xs">
                  <Activity className="w-3.5 h-3.5 text-gray-400 mt-0.5" />
                  <div>
                    <span className="text-gray-600 dark:text-gray-400">
                      Status changed to <span className="font-medium">{getStatusLabel(node.status)}</span>
                    </span>
                    <div className="text-gray-400 dark:text-gray-500">Just now</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'details' && (
          <div className="space-y-4">
            {node.acceptance_criteria && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Acceptance Criteria
                </h4>
                <div className="text-sm text-gray-600 dark:text-gray-400 whitespace-pre-wrap bg-gray-50 dark:bg-gray-800 p-3 rounded-lg">
                  {node.acceptance_criteria}
                </div>
              </div>
            )}

            {node.context && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Context
                </h4>
                <div className="text-sm text-gray-600 dark:text-gray-400 whitespace-pre-wrap">
                  {node.context}
                </div>
              </div>
            )}

            {node.agent_instructions && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Agent Instructions
                </h4>
                <div className="text-sm text-gray-600 dark:text-gray-400 whitespace-pre-wrap font-mono text-xs bg-gray-900 text-gray-100 p-3 rounded-lg">
                  {node.agent_instructions}
                </div>
              </div>
            )}
            
            {/* Metadata */}
            {node.metadata && Object.keys(node.metadata).length > 0 && (
              <div>
                <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Metadata
                </h4>
                <div className="text-xs bg-gray-50 dark:bg-gray-800 p-3 rounded-lg font-mono">
                  <pre>{JSON.stringify(node.metadata, null, 2)}</pre>
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'comments' && (
          <NodeCommentsTab planId={planId} nodeId={node.id} />
        )}

        {activeTab === 'artifacts' && (
          <NodeArtifactsTab planId={planId} nodeId={node.id} />
        )}

        {activeTab === 'logs' && (
          <NodeLogsTab planId={planId} nodeId={node.id} />
        )}
      </div>

      {/* Quick Actions Bar */}
      <div className="px-4 pb-4 pt-2 border-t border-gray-200 dark:border-gray-700">
        <QuickActions
          node={node}
          onWatch={onWatch}
          onStar={onStar}
          onDelete={() => setShowDeleteConfirm(true)}
          isWatching={isWatching}
          isStarred={isStarred}
        />
      </div>

      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 max-w-sm mx-auto">
            <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-4">
              Delete Node?
            </h3>
            <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">
              Are you sure you want to delete "{node.title}"? This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600"
              >
                Cancel
              </button>
              <button
                onClick={() => {
                  onDelete?.();
                  setShowDeleteConfirm(false);
                }}
                className="px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ImprovedNodeDetails;
